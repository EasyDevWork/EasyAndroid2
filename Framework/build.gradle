apply plugin: 'com.android.library'
//apply plugin: 'kotlin-android'
//apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.dcendents.android-maven'

repositories {
    maven { url "https://jitpack.io" }
    mavenCentral()
    google()
    jcenter()
}

def config = rootProject.ext.android
def lib = rootProject.ext.dependencies

android {
    compileSdkVersion config.compileSdkVersion
    defaultConfig {
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    dataBinding {
        enabled true
    }

    buildTypes {
        release {
            manifestPlaceholders = [application_id    : config.applicationId,
                                    bugly_app_id      : "${bugly_app_id_debug}",
                                    bugly_enable_debug: false,
                                    bugly_app_channel : "1",
                                    bugly_app_version : config.appName + '_' + config.versionName + '.' + config.versionCode]
            minifyEnabled false
            zipAlignEnabled false
            consumerProguardFiles 'proguard-rules.pro'
        }

        debug {
            manifestPlaceholders = [application_id    : config.applicationId,
                                    bugly_app_id      : "${bugly_app_id_release}",
                                    bugly_enable_debug: true,
                                    bugly_app_channel : "1",
                                    bugly_app_version : config.appName + '_' + config.versionName + '.' + config.versionCode]
            minifyEnabled false
            zipAlignEnabled false
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])

    api lib.androidx_appcompat

    implementation lib.aspectjrt

    api lib.core_ktx
    api lib.constraintlayout
    api lib.kotlin
    api lib.fastjson
    api lib.mmkv
    api lib.relinker

    api lib.eventbus
    api lib.recyclerViewAdapter
    api lib.recyclerviewDecoration
    api lib.recyclerview

    implementation lib.multidex

    implementation lib.androidx_lifecycle_extensions
    api lib.liveDataBus
    api lib.rxjava
    api lib.rxandroid
    api lib.rxpermissions
//    api lib.rxbinding
    api lib.objectbox_rxjava

    api lib.dagger
    annotationProcessor lib.dagger_compiler


//    api lib.rxlifecycle3
//    api lib.rxlifecycle3_android

    api lib.autodispose
    api lib.autodispose_lifecycle
    api lib.autodispose_android
    api lib.autodispose_android_lifecycle

//    api project(':AptLib')
//    annotationProcessor project(':AptProcessor')
//    api lib.arouter_api
//    annotationProcessor lib.arouter_compiler
    api lib.easy_apt
    annotationProcessor lib.easy_apt_compiler


    api project(':net')
    api project(':store')
    api project(':loadimage')
    api project(':widget')
    api project(':utils')
}
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main
final def log = project.logger
final def variants = project.android.libraryVariants

variants.all {  variant ->
    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        println "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true)
        new Main().run(args, handler)

        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
